{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE DeriveFunctor   #-}
{-# LANGUAGE LambdaCase      #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE NoMonomorphismRestriction #-}

module Heroku.DSL where

import           Control.Monad.Free    (Free, MonadFree, iterM, liftF)
import           Control.Monad.Free.TH (makeFree)

import qualified Heroku.API            as API
import           Heroku.Types

import API.Rest
import           Imports.Prelude (exitSuccess)

data HerokuF next
    = RestartApp App next
    | RestartDyno Dyno next
    | GetAppInfo App (AppInfo -> next)
    deriving (Functor)
-- Remi: I'm wondering what is the `pure` function
-- generated by above functor automatic deriving !?

type Heroku a = Free HerokuF a
makeFree ''HerokuF

run :: Auth -> Heroku a -> IO a
run auth = iterM go where
    go = \case 
        (RestartApp app next)   -> API.restartApp "test" auth >> next
        (RestartDyno dyno next) -> API.restartDyno "test" "test" auth >> next
        (GetAppInfo dynos next) -> API.fetchDetails "test" auth >> return (AppInfo "test") >>= next
--         _ -> print "done" >> exitSuccess
